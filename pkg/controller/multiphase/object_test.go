package multiphase_test

import (
	"github.com/disaster37/operator-sdk-extra/v2/pkg/apis/multiphase"
	"github.com/disaster37/operator-sdk-extra/v2/pkg/object"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// +k8s:openapi-gen=true
type MultiPhaseObjectSpec struct {
	// +operator-sdk:csv:customresourcedefinitions:type=spec
	Test string `json:"test"`
}

type MultiPhaseObjectStatus struct {
	multiphase.DefaultMultiPhaseObjectStatus `json:",inline"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type MultiPhaseObject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   MultiPhaseObjectSpec   `json:"spec,omitempty"`
	Status MultiPhaseObjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type MultiPhaseObjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MultiPhaseObject `json:"items"`
}

func init() {
	SchemeBuilder.Register(&MultiPhaseObject{}, &MultiPhaseObjectList{})
}

func (h *MultiPhaseObject) GetStatus() object.MultiPhaseObjectStatus {
	return &h.Status
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MultiPhaseObject) DeepCopyInto(out *MultiPhaseObject) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

func (in *MultiPhaseObject) DeepCopy() *MultiPhaseObject {
	if in == nil {
		return nil
	}
	out := new(MultiPhaseObject)
	in.DeepCopyInto(out)
	return out
}

func (in *MultiPhaseObject) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *MultiPhaseObjectSpec) DeepCopyInto(out *MultiPhaseObjectSpec) {
	*out = *in
}

func (in *MultiPhaseObjectSpec) DeepCopy() *MultiPhaseObjectSpec {
	if in == nil {
		return nil
	}
	out := new(MultiPhaseObjectSpec)
	in.DeepCopyInto(out)
	return out
}

func (in *MultiPhaseObjectStatus) DeepCopyInto(out *MultiPhaseObjectStatus) {
	*out = *in
	in.DefaultMultiPhaseObjectStatus.DeepCopyInto(&out.DefaultMultiPhaseObjectStatus)
}

func (in *MultiPhaseObjectStatus) DeepCopy() *MultiPhaseObjectStatus {
	if in == nil {
		return nil
	}
	out := new(MultiPhaseObjectStatus)
	in.DeepCopyInto(out)
	return out
}

func (in *MultiPhaseObjectList) DeepCopyInto(out *MultiPhaseObjectList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MultiPhaseObject, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

func (in *MultiPhaseObjectList) DeepCopy() *MultiPhaseObjectList {
	if in == nil {
		return nil
	}
	out := new(MultiPhaseObjectList)
	in.DeepCopyInto(out)
	return out
}

func (in *MultiPhaseObjectList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}
