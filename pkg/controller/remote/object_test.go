package remote_test

import (
	"github.com/disaster37/operator-sdk-extra/v2/pkg/apis/remote"
	"github.com/disaster37/operator-sdk-extra/v2/pkg/object"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// +k8s:openapi-gen=true
type RemoteObjectSpec struct {
	// +operator-sdk:csv:customresourcedefinitions:type=spec
	Test string `json:"test"`
}

type RemoteObjectStatus struct {
	remote.DefaultRemoteObjectStatus `json:",inline"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
type RemoteObject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   RemoteObjectSpec   `json:"spec,omitempty"`
	Status RemoteObjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true
type RemoteObjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RemoteObject `json:"items"`
}

func init() {
	SchemeBuilder.Register(&RemoteObject{}, &RemoteObjectList{})
}

func (h *RemoteObject) GetStatus() object.RemoteObjectStatus {
	return &h.Status
}

func (o *RemoteObject) GetExternalName() string {
	return o.Name
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RemoteObject) DeepCopyInto(out *RemoteObject) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

func (in *RemoteObject) DeepCopy() *RemoteObject {
	if in == nil {
		return nil
	}
	out := new(RemoteObject)
	in.DeepCopyInto(out)
	return out
}

func (in *RemoteObject) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func (in *RemoteObjectSpec) DeepCopyInto(out *RemoteObjectSpec) {
	*out = *in
}

func (in *RemoteObjectSpec) DeepCopy() *RemoteObjectSpec {
	if in == nil {
		return nil
	}
	out := new(RemoteObjectSpec)
	in.DeepCopyInto(out)
	return out
}

func (in *RemoteObjectStatus) DeepCopyInto(out *RemoteObjectStatus) {
	*out = *in
	in.DefaultRemoteObjectStatus.DeepCopyInto(&out.DefaultRemoteObjectStatus)
}

func (in *RemoteObjectStatus) DeepCopy() *RemoteObjectStatus {
	if in == nil {
		return nil
	}
	out := new(RemoteObjectStatus)
	in.DeepCopyInto(out)
	return out
}

func (in *RemoteObjectList) DeepCopyInto(out *RemoteObjectList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RemoteObject, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

func (in *RemoteObjectList) DeepCopy() *RemoteObjectList {
	if in == nil {
		return nil
	}
	out := new(RemoteObjectList)
	in.DeepCopyInto(out)
	return out
}

func (in *RemoteObjectList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}
